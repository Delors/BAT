<?xml version="1.0" encoding="UTF-8"?>
<!--
License (BSD Style License):
Copyright (c) 2009, 2011
Software Technology Group
Department of Computer Science
Technische Universität Darmstadt
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

- Redistributions of source code must retain the above copyright notice,
  this list of conditions and the following disclaimer.
- Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.
- Neither the name of the Software Technology Group or Technische
  Universität Darmstadt nor the names of its contributors may be used to
  endorse or promote products derived from this software without specific
  prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

Author 	Michael Eichberg (mail@michael-eichberg.de)
			Sebastian Harrte
			Thomas Schlosser
-->
<project name="BAT" default="default" basedir=".">
	<description>Builds and tests the BAT project.</description>

	<!--
		Read user properties from build.properties.
 		Use this mechanism to set your own "scala.home".
	-->
	<property file="build.properties" />

	<!-- General properties -->
	<property name="version" value="1.6.0.RC2" />


	<!-- Directories which contain the project's source files. -->
	<property name="src.main.dir" value="src/main" />
	<property name="src.spec.dir" value="src/spec" />
	<property name="src.test.dir" value="src/test" />
	<property name="src.demo.dir" value="src/demo" />


	<!-- Directories where the generated code is stored. -->
	<property name="build.dir" value="build" />
	<property name="class.dir" value="${build.dir}/class" />
	<property name="generated.dir" value="${build.dir}/src" />
	<property name="scala.generated.dir" value="${generated.dir}/scala" />
	<property name="prolog.generated.dir" value="${generated.dir}/prolog" />
	<property name="doc.dir" value="${build.dir}/doc" />
	<property name="testdata.dir" value="test" />


	<!-- Libraries & tools used at compile- and or run-time. -->
	<property name="lib.dir" value="lib" />

	<!-- Sets "scala.home" to the default directory, if no "build.properties" file exists. -->
	<condition property="scala.home" value="/opt/local/share/scala-2.9/">
		<not>
			<isset property="scala.home" />
		</not>
	</condition>
	<echo message="The Scala Home directory is set to: ${scala.home}" />
	<!-- Sets "scala.lib" to the default directory, if no "build.properties" file exists. -->
	<condition property="scala.lib" value="${scala.home}/lib/">
		<not>
			<isset property="scala.lib" />
		</not>
	</condition>
	<echo message="The Scala Lib directory is set to: ${scala.lib}" />
	<property name="scala-compiler.jar" value="${scala.lib}/scala-compiler.jar" />
	<property name="scala-library.jar" value="${scala.lib}/scala-library.jar" />

	<property name="scalatest.jar" value="${lib.dir}/scalatest-1.6.1.jar" />
	<property name="junit.jar" value="${lib.dir}/junit-4.10.jar" />

	<property name="saxon.jar" value="${lib.dir}/saxon9.jar" />
	<property name="saxon-ant.jar" value="${lib.dir}/saxon9-ant.jar" />

	<!-- Configuration of the "path"s. -->
	<path id="saxon.classpath">
		<pathelement location="${saxon.jar}" />
		<pathelement location="${saxon-ant.jar}" />
	</path>
	<path id="scala.classpath">
		<pathelement location="${scala-compiler.jar}" />
		<pathelement location="${scala-library.jar}" />
	</path>
	<path id="project.classpath">
		<path refid="scala.classpath" />
		<pathelement location="${class.dir}" />
	</path>
	<path id="test.classpath">
		<path refid="project.classpath" />
		<pathelement location="${scalatest.jar}" />
		<pathelement location="${junit.jar}" />
	</path>

	<path id="scala.sourcepath">
		<pathelement location="${src.main.dir}" />
		<pathelement location="${scala.generated.dir}" />
	</path>


	<!-- Definition of additional tasks used to generate / compile BAT. -->
	<taskdef resource="scala/tools/ant/antlib.xml">
		<classpath refid="scala.classpath" />
	</taskdef>
	<taskdef name="scalatest" classname="org.scalatest.tools.ScalaTestAntTask">
		<classpath refid="test.classpath" />
	</taskdef>
	<taskdef name="saxon-xslt" classname="net.sf.saxon.ant.AntTransform">
		<classpath refid="saxon.classpath" />
	</taskdef>

	<!-- Definition of all targets. -->

	<target name="init"
	        description="Creates the initial directory structure where the generated / compiled files are stored.">
		<tstamp />
		<mkdir dir="${generated.dir}" />
		<mkdir dir="${class.dir}" />
		<mkdir dir="${doc.dir}" />
	</target>

	<target name="clean" description="Cleans up all artifacts that can be regenerated.">
		<delete dir="${build.dir}" />
	</target>
	<target name="clean-generated-prolog-code" description="Clean up just the generated prolog source files.">
		<delete dir="${prolog.generated.dir}" />
	</target>
	<target name="clean-generated-scala-code" description="Clean up just the generated scala source files.">
		<delete dir="${scala.generated.dir}" />
	</target>
	<target name="clean-generated-code" depends="clean-generated-prolog-code,clean-generated-scala-code" />


	<target name="check-instructions-specification" description="Checks the instructions specification document.">

		<schemavalidate failonerror="true" file="${src.spec.dir}/10.2011/JVMInstructions.xml">
			<!--EXAMPLE IF WE NEED TO MAKE THE BINDING (namespace to schema) EXPLICIT
	        	<schema namespace="http://schemas.xmlsoap.org/ws/2003/03/addressing"
	          			file="${soap.dir}/ws-addressing.xsd" />
			-->
		</schemavalidate>
		<echo>Schema validation of "10.2011/JVMInstructions.xml" succeeded.</echo>
	</target>

	<target name="generate-code-for-resolved-representation"
	        depends="init,check-instructions-specification"
	        description='Generates (Scala) code necessary for the "resolved representation" of Java Bytecode.'>

		<mkdir dir="${scala.generated.dir}/de/tud/cs/st/bat/resolved/reader" />

		<!-- Does not work - we need an XSLT 2.0 processor
		<xslt in="${src.spec.dir}/10.2011/JVMInstructions.xml" out="${scala.generated.dir}/de/tud/cs/st/bat/resolved/InstructionExceptions.scala"
		      style="${src.main.dir}/de/tud/cs/st/bat/resolved/GenerateInstructionExceptionsClass.xsl">
		</xslt>
	-->

		<saxon-xslt style="${src.main.dir}/de/tud/cs/st/bat/resolved/GenerateInstructionExceptionsClass.xsl"
		            in="${src.spec.dir}/10.2011/JVMInstructions.xml"
		            out="${scala.generated.dir}/de/tud/cs/st/bat/resolved/InstructionExceptions.scala">
		</saxon-xslt>

		<!--
			We want to run the XSLT task only when the JVMInstructions file has changed.
		-->
		<saxon-xslt basedir="${src.spec.dir}/10.2011"
		            destdir="${scala.generated.dir}/de/tud/cs/st/bat/resolved"
		            style="${src.main.dir}/de/tud/cs/st/bat/resolved/GenerateInstructionClasses.xsl"
		            includes="JVMInstructions.xml" />

		<touch file="${scala.generated.dir}/de/tud/cs/st/bat/resolved/JVMInstructions.html" />
		<!-- TODO Can we omit "generating" these files just to prevent ant from recreating all files on every run? -->

		<saxon-xslt style="${src.main.dir}/de/tud/cs/st/bat/resolved/reader/GenerateBytecodeReaderAndBindingClass.xsl"
		            in="${src.spec.dir}/10.2011/JVMInstructions.xml"
		            out="${scala.generated.dir}/de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding.scala" />

	</target>

	<target name="generate-code-for-prolog-representation"
	        depends="generate-code-for-resolved-representation"
	        description="Generates code (Scala and Prolog) related to the Prolog Based Representation of Java Bytecode.">

		<mkdir dir="${prolog.generated.dir}" />
	</target>

	<target name="compile" depends="generate-code-for-resolved-representation" description="Compiles BAT.">
		<echo>
		Note, if compilation fails due to a stack overflow error it is necessary
		to increase Java's heap and stack size. E.g. if you use Unix just set
		ANT_OPTS before calling "ant compile"; e.g.,
			export ANT_OPTS="-Xmx1024m -Xss128m"
		</echo>

		<!-- The attribute "optimise='on'" is not very useful during development
			 since it requires to basically recompile the complete project after
			 every single (minor) source code change.
		-->
		<scalac target="jvm-1.5"
		        destdir="${class.dir}"
		        classpathref="project.classpath"
		        deprecation="on"
		        scalacdebugging="on"
		        unchecked="yes"
		        force="changed">
			<src path="${src.main.dir}" />
			<src path="${src.demo.dir}" />
			<src path="${scala.generated.dir}" />
			<include name="**/*.scala" />
			<include name="**/*.java" />
		</scalac>

		<javac srcdir="${src.main.dir}" destdir="${class.dir}" debug="on" source="1.5" />
	</target>

	<target name="compile-tests" depends="compile" description="Compiles BAT's test suite.">
		<scalac srcdir="${src.test.dir}"
		        target="jvm-1.5"
		        destdir="${class.dir}"
		        classpathref="test.classpath"
				addparams="-g:vars"
		        deprecation="on"
		        scalacdebugging="on"
		        force="true">
			<include name="**/*.scala" />
		</scalac>
	</target>

	<target name="test-bytecode-to-prolog" depends="compile">
		<!--
            ByteCodeToProlog Task Definition
        -->
		<taskdef name="bytecodeToProlog" classname="de.tud.cs.st.bat.resolved.ant.BytecodeToPrologTask">
			<classpath>
				<path refid="project.classpath" />
			</classpath>
		</taskdef>

		<echo>Testing the Prolog Generation</echo>

		<bytecodeToProlog output="${prolog.generated.dir}/Issues.pl" classpathRef="project.classpath">
			<fileset dir="${testdata.dir}" includes="**/*.zip" />
		</bytecodeToProlog>
	</target>

	<target name="generate-prolog-representations" depends="generate-code-for-prolog-representation,compile">
		<echo>(Re-)Generating prolog representations - this may take several minutes!</echo>

		<echo>Generating prolog representation for: Apache ANT</echo>
		<java classname="de.tud.cs.st.bat.resolved.BytecodeToProlog"
		      fork="true"
		      maxmemory="1024m"
		      failonerror="true"
		      logError="true"
		      output="${prolog.generated.dir}/Apache ANT 1.7.1 - target 1.2.pl">
			<classpath>
				<path refid="project.classpath" />
			</classpath>
			<arg value="${testdata.dir}/classfiles/Apache ANT 1.7.1 - target 1.2.zip" />
		</java>

		<echo>Generating prolog representation for: Columbus 2008_10_16 - target 1.6</echo>
		<java classname="de.tud.cs.st.bat.resolved.BytecodeToProlog"
		      fork="true"
		      maxmemory="1024m"
		      failonerror="true"
		      logError="true"
		      output="${prolog.generated.dir}/Columbus 2008_10_16 - target 1.6.pl">
			<classpath>
				<path refid="project.classpath" />
			</classpath>
			<arg value="${testdata.dir}/classfiles/Columbus 2008_10_16 - target 1.6.zip" />
		</java>

		<echo>Generating prolog representation for: Multithreaded RPN Calculator 2008_10_17 - Java 6 all debug info</echo>
		<java classname="de.tud.cs.st.bat.resolved.BytecodeToProlog"
		      fork="true"
		      maxmemory="1024m"
		      failonerror="true"
		      logError="true"
		      output="${prolog.generated.dir}/Multithreaded RPN Calculator 2008_10_17 - Java 6 all debug info.pl">
			<classpath>
				<path refid="project.classpath" />
			</classpath>
			<arg value="${testdata.dir}/classfiles/Multithreaded RPN Calculator 2008_10_17 - Java 6 all debug info.zip" />
		</java>

		<echo>Generating prolog representation for: Opal 0.3</echo>
		<java classname="de.tud.cs.st.bat.resolved.BytecodeToProlog"
		      fork="true"
		      maxmemory="1024m"
		      failonerror="true"
		      logError="true"
		      output="${prolog.generated.dir}/Opal 0.3.pl">
			<classpath>
				<path refid="project.classpath" />
			</classpath>
			<arg value="${testdata.dir}/classfiles/Opal 0.3.zip" />
		</java>
	</target>

	<target name="tests-common" depends="compile-tests">
		<echo>
		Note, if the execution of the test suites fails it might be necessary
		to increase Java's heap and stack size before executing the tests.
		To do so set ANT_OPTS before executing the tests.
			export ANT_OPTS="-Xmx1024m -Xss128m"
		</echo>
	</target>

	<target name="run-basic-tests" depends="tests-common" description="Executes BAT's basic tests.">
		<scalatest>
			<runpath>
				<path refid="test.classpath" />
			</runpath>
			<reporter type="stderr" />
			<!-- <reporter type="stderr graphic" />	-->
			<suite classname="de.tud.cs.st.bat.resolved.ArrayTypeTest" />
			<suite classname="de.tud.cs.st.bat.resolved.FieldTypeTest" />
			<suite classname="de.tud.cs.st.bat.resolved.MethodDescriptorTest" />
			<suite classname="de.tud.cs.st.bat.resolved.ObjectTypeTest" />
			<suite classname="de.tud.cs.st.bat.resolved.AttributesTest" />
			<suite classname="de.tud.cs.st.bat.resolved.SourceElementIDsTest" />
			<suite classname="de.tud.cs.st.bat.resolved.reader.SignaturesTest" />
			<suite classname="de.tud.cs.st.bat.resolved.analyses.ProjectTest" />
			<suite classname="de.tud.cs.st.bat.resolved.dependency.DependencyExtractorTest" />
			<suite classname="de.tud.cs.st.bat.resolved.dependency.UseIDOfBaseTypeForArrayTypesTest" />
			<suite classname="de.tud.cs.st.bat.resolved.dependency.DependenciesToPrimitiveTypesTest" />
		</scalatest>
	</target>

	<target name="run-comprehensive-tests" depends="tests-common" description="Runs all tests.">
		<scalatest>
			<runpath>
				<path refid="test.classpath" />
			</runpath>
			<reporter type="stderr" />
			<!-- <reporter type="stderr graphic" />	-->
			<suite classname="de.tud.cs.st.bat.BATSuite" />
		</scalatest>
	</target>

	<target name="api-doc" depends="compile" description="Generates BAT's API documentation.">
		<!-- TODO java doc... -->
		<scaladoc destdir="${doc.dir}"
		          deprecation="yes"
		          unchecked="yes"
		          doctitle="The Bytecode Library BAT - Version ${version}"
		          classpathref="project.classpath">
			<src path="${src.main.dir}" />
			<src path="${scala.generated.dir}" />
			<include name="**/*.scala" />
		</scaladoc>
	</target>

	<target name="instructions-schema-doc"
	        depends="init"
	        description="Creates the documentation of the XML schema used for specifying Java's bytecode instructions.">
		<xslt basedir="${src.spec.dir}"
		      destdir="${doc.dir}"
		      style="${lib.dir}/xs3p.xsl"
		      includes="10.2011/JVMInstructions.xsd" />
	</target>

	<target name="doc" depends="api-doc,instructions-schema-doc" description="Generates all documentation." />

	<target name="demo-architecture-checking" depends="compile" description="Checks BAT's architecture for architectural violations.">
		<java classname="de.tud.cs.st.bat.resolved.dependency.checking.BATArchitecture" fork="true">
			<classpath>
				<path refid="project.classpath" />
			</classpath>
			<arg line="java.lang.Object" />
		</java>
	</target>

	<target name="demo-representations" depends="compile" description="Demonstrates the XML and Prolog representations provided by BAT.">
		<echo>
			_________________________________________________________________________


			Prolog based representation of a "java.lang.Object"

			_________________________________________________________________________

		</echo>
		<java classname="de.tud.cs.st.bat.resolved.BytecodeToProlog" fork="true">
			<classpath>
				<path refid="project.classpath" />
			</classpath>
			<arg line="java.lang.Object" />
		</java>
		<echo>
			_________________________________________________________________________


			XML based representation of "java.lang.Object".

			_________________________________________________________________________

		</echo>
		<java classname="de.tud.cs.st.bat.resolved.BytecodeToXML" fork="true">
			<classpath>
				<path refid="project.classpath" />
			</classpath>
			<arg line="java.lang.Object" />
		</java>
	</target>

	<target name="package" depends="compile" description="Packages BAT.">
		<jar destfile="${build.dir}/bat-${version}.jar" basedir="${class.dir}" />
	</target>

	<target name="default"
	        depends="compile,run-comprehensive-tests,doc,package"
	        description="Compiles, tests, executes and packages BAT." />

</project>
